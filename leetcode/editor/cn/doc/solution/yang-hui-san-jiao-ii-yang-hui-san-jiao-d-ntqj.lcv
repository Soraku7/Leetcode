## [119.杨辉三角Ⅱ - 力扣](https://leetcode-cn.com/problems/pascals-triangle-ii/submissions/)

​	要咱输出第row行的杨辉三角

​	首先，众所周知，杨辉三角与组合数密不可分——**杨辉三角的第i行第j列的值为C(i, j)**。

​	又因为组合数有一个简单的推论(咱高中都学过)——**C(i, j) = C(i - 1, j - 1) + C(i - 1, j)**。

​	与[118. 杨辉三角](https://leetcode-cn.com/problems/pascals-triangle/)的原理相同，不过就不用二维数组了，改用两个一维数组就能搞定

​	类似于二维数组到滚动数组的优化

* c++

``````c++
class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> ans(rowIndex + 1);    //提前声明好大小
        ans[0] = 1;                       //第一个数字肯定是1
        for(int i = 1; i <= rowIndex; ++i){
            vector<int> tmp(i + 1);  //申明好这一行的大小
            tmp[0] = 1;              //第一个数字
            for(int j = 1; j < i; ++j){
                tmp[j] = ans[j - 1] + ans[j]; //高中知识
            }
            tmp[i] = 1;             //最后一个数字
            copy(tmp.begin(), tmp.end(), ans.begin());  //拷贝到答案里
        }
        return ans;
    }
};
``````

