### 解题思路

经典动态规划问题

### 代码

* cpp

```cpp
class Solution {
public:
    int maxProfit(vector<int>& prices) {
//贪心思想 对于每个 i 寻找 最小的 j in [0..i] ， O（N）  , 即当前步骤的局部最优
     int minAtLeft= INT_MAX;
     int res=0;
     for(int i=0;i<prices.size();i++)
     {
         if(minAtLeft> prices[i] ) minAtLeft= prices[i];
         if (prices[i] - minAtLeft > res ) res=  prices[i] - minAtLeft ; 
     }
     return res;    
    // 动态规划 

    //   dp[i][0]   表示第i天手头没有股票的 能得到的最大收益 
    //   dp[i][1]   表示第i天手头有股票的 能得到的最大收益 

    //   dp[i][0] = std::max(prices[i] -  dp[i-1][1] ,  dp[i-1][0] )
    //   dp[i][1] =  std::max() 


    }
};
```

